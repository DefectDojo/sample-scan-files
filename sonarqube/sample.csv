project;component;creationDate;updateDate;severity;status;key;langName;name;htmlDesc
barbich_django-DefectDojo;barbich_django-DefectDojo:django-DefectDojo/components/node_modules/@yarn_components/jquery/test/data/core/dont_return.php;2019-02-12T01:48:34+0100;2019-02-12T01:48:34+0100;MINOR;OPEN;php:S2964;PHP;"""sleep""" should not be called";"<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
</ul>"
barbich_django-DefectDojo;barbich_django-DefectDojo:django-DefectDojo/components/node_modules/@yarn_components/jquery/test/data/etag.php;2019-02-12T01:48:34+0100;2019-02-12T02:03:05+0100;CRITICAL;OPEN;php:S4790;PHP;Hashing data is security-sensitive;"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule creates an issue when one of the following functions are called: <a href=""http://php.net/manual/en/function.hash.php"">hash</a>, <a
href=""http://php.net/manual/en/function.hash-init.php"">hash_init</a>, <a href=""http://php.net/manual/en/function.crypt.php"">crypt</a>, <a
href=""http://php.net/manual/en/function.password-hash.php"">password_hash</a>, <a
href=""http://php.net/manual/en/function.hash-pbkdf2.php"">hash_pbkdf2</a>, <a
href=""http://php.net/manual/en/function.openssl-pbkdf2.php"">openssl_pbkdf2</a>, <a href=""http://php.net/manual/en/function.md5.php"">md5</a>, <a
href=""http://php.net/manual/en/function.sha1.php"">sha1</a></p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>If the hashed data is sensitive, just use the functions <a href=""http://php.net/manual/en/book.password.php"">officially recommended by PHP</a>,
i.e. <code>password_hash</code>, <code>password_verify</code> and <code>password_needs_rehash</code>.</p>
<p>Alternatively you can use the <code>crypt</code> function or <code>hash_pbkdf2</code> functions. Do not use the <code>md5</code> or
<code>sha1</code> for sensitive values, and avoid <code>hash</code> and <code>hash_init</code> whenever possible.</p>
<p>If you use <code>hash_pbkdf2</code> or <code>crypt</code> choose a hashing algorithms which is <a
href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">known to be strong</a>. Check regularly that this is still the case as hashing
algorithms often lose strength over time.</p>
<p>It is recommended to use a hashing function that generate salts automatically, but if you generate salts separately:</p>
<ul>
  <li> generate a cryptographically strong and random salt that is unique for every credential being hashed. </li>
  <li> the salt is applied correctly before the hashing. </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
</ul>
<p> </p>
<p>Note that <code>password_hash</code> generates strong salts automatically.</p>
<p>Remember to rehash your data regularly as the hashing algorithms become less secure over time. The <code>password_needs_rehash</code> function
helps you with that.</p>
<h2>Exceptions</h2>
<p>HMAC computing is out of the scope of this rule. Thus no issue will be raised when the <code>hash_init</code> function is called with
<code>HASH_HMAC</code> given as second parameter.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>"
barbich_django-DefectDojo;barbich_django-DefectDojo:django-DefectDojo/components/node_modules/@yarn_components/jquery/test/data/event/longLoadScript.php;2019-02-12T01:48:34+0100;2019-02-12T01:48:34+0100;MINOR;OPEN;php:S2964;PHP;"""sleep"" should not be called";"<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
</ul>"
barbich_django-DefectDojo;barbich_django-DefectDojo:django-DefectDojo/components/node_modules/@yarn_components/jquery/test/data/name.php;2019-02-12T01:48:34+0100;2019-02-12T01:48:34+0100;MINOR;OPEN;php:S2964;PHP;"""sleep"" should not be called";"<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
</ul>"
barbich_django-DefectDojo;barbich_django-DefectDojo:django-DefectDojo/static/jquery/test/data/core/dont_return.php;2019-02-12T01:48:34+0100;2019-02-12T01:48:34+0100;MINOR;OPEN;php:S2964;PHP;"""sleep"" should not be called";"<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
</ul>"
barbich_django-DefectDojo;barbich_django-DefectDojo:django-DefectDojo/static/jquery/test/data/event/longLoadScript.php;2019-02-12T01:48:34+0100;2019-02-12T01:48:34+0100;MINOR;OPEN;php:S2964;PHP;"""sleep"" should not be called";"<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
</ul>"
barbich_django-DefectDojo;barbich_django-DefectDojo:django-DefectDojo/static/jquery/test/data/name.php;2019-02-12T01:48:34+0100;2019-02-12T01:48:34+0100;MINOR;OPEN;php:S2964;PHP;"""sleep"" should not be called";"<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
</ul>"
